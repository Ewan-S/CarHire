@model IEnumerable<CarHire.Models.StoreLocation>

<head>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=true&libraries=places,geometry"></script>
</head>

<body>
    <h5 class="postcodeLookupText">
        <label>Find a location near you @Html.TextBox("postcodeText", null, new { placeholder = "Place/Address", @id = "searchBox", @style = "width:400px;" })</label>

        <em>within <select id="distanceDropdown" data-bind="options: distanceValues, value: DistanceValue"></select></em>
    </h5>
    <hr />

    <div id="googleMap"></div>

    <div id="locationsOverlay" class="well" data-bind="visible: DisplayLocationsOverlay">

        <div id="locationsData"></div>

    </div>
</body>


@section Scripts{
    <script>
        var PostcodeSearchbox, Map, StoreInfoWindow, UserInfoWindow, UserMarker;
        var ViewModel;

        var storeLocations = [];
        var userLocation, userLatLng;

        function LocationsViewModel(id, name) {
            var self = this;

            self.distanceValues = ko.observableArray(["5 miles", "10 miles", "20 miles", "50 miles", "100 miles", "Any distance"]),
            self.DistanceValue = ko.observable("Any distance"),

            self.SelectedLocationId = ko.observable(id);
            self.SelectedLocationName = ko.observable(name);

            //should we display the locations overlay - ie, the user has selected a location and distance
            self.DisplayLocationsOverlay = ko.observable(false);
        }

        function setDisplayLocationsOverlayFlag(displayLocationsOverlay) {
            if (displayLocationsOverlay != null)
                ViewModel.DisplayLocationsOverlay(displayLocationsOverlay);
        }

        function setSelectedLocationData(id, storeName) {
            if (id != null)
                ViewModel.SelectedLocationId(id);

            if (name != null)
                ViewModel.name(storeName);
        }

        $(function () {

            ViewModel = new LocationsViewModel(null, null);

            ViewModel.DistanceValue.subscribe(function (newValue) {
                onDropdownChange();
            });

            ko.applyBindings(ViewModel);

            //setup the google maps popups, but dont show or set content
            StoreInfoWindow = new google.maps.InfoWindow({
                content: "",
                maxWidth: 200
            });

            UserInfoWindow = new google.maps.InfoWindow({
                content: "",
                maxWidth: 50
            });

            //setup the postcode lookup textbox
            SetupPostcodeBox();

            //create the map, and place markers
            SetupMap();
        });


        function SetupPostcodeBox() {
            //setup the postcode searchbox using google's autocomplete geocode textbox
            PostcodeSearchbox = new google.maps.places.Autocomplete(document.getElementById('searchBox'), { types: ['geocode'] });

            //on postcodebox change, call:
            google.maps.event.addListener(PostcodeSearchbox, 'place_changed', onPostcodeBoxChanged);
        }

        function SetupMap() {

            var country = "United kingdom";
            var geocoder = new google.maps.Geocoder();

            //geocodes the middle (ish) of the UK and creates the map
            geocoder.geocode({ 'address': country }, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    var mapProperties = {
                        zoom: 6,
                        mapTypeId: google.maps.MapTypeId.ROADMAP,
                        streetViewControl: false,
                        center: { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng() }
                    };

                    Map = new google.maps.Map(document.getElementById("googleMap"), mapProperties);
                } else {
                    alert("boom goes the dynamite");
                }

                //add our store location markers
                PlaceMarkersFromModel();

            });
        }

        function onDropdownChange() {
            //if the user has selected their location in the textbox
            if (userLocation != undefined);
                requestMarkerDistances();
        }

        function onPostcodeBoxChanged() {

            //get the location the user has selected from the dropdown
            userLocation = this.getPlace();

            //users location as lat/lng
            userLatLng = new google.maps.LatLng(userLocation.geometry.location.lat(), userLocation.geometry.location.lng());

            addUserLocationMarker(userLatLng, '<em>You</em>');

            requestMarkerDistances();
        }

        function requestMarkerDistances() {

            //returns an array of storelocation Ids, and the distance from the user
            var markerDistances = checkMarkerDistances();

            $.ajax({
                type: "POST",
                url: '@Url.Action("LocationsListPartial", "Locations")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ storeLocations: markerDistances }),
                //dataType: "json",
                cache: false,
                traditional: true,

                success: function (result) {
                    $('#locationsData').html(result);

                    setDisplayLocationsOverlayFlag(true);
                },
                error: function (result) {
                    alert('Oh no :(');

                    $('#locationsData').html("<p>Shit went south</p>");

                    setDisplayLocationsOverlayFlag(true);
                }
            });

            Map.setCenter(userLatLng);
            Map.setZoom(8);
        }


        function PlaceMarkersFromModel() {
            @if (Model.Any())
            {
                foreach (var item in Model)
                {
                    @:var latLng = new google.maps.LatLng("@item.latitude", "@item.longtitude");
                    @:addStoreLocationMarker("@item.LocationId", latLng, "@item.StoreName", "@item.Address.JavascriptEscapedFormattedAddress");

                    <text>
                    var storeData = {
                        Id: "@item.LocationId",
                        location: latLng,
                        storeName: "@item.StoreName",
                        address: "@item.Address.JavascriptEscapedFormattedAddress",
                        withinSelectedBounds: false,
                        milesFromUser: -1
                    };
                    </text>

                    @: storeLocations.push(storeData);
                }
            }
            else
            {
                @:$("#locationsOverlay").html("<p>No locations found! <em>Update-Datebase ?</em></p>");
                @:setDisplayLocationsOverlayFlag(true);
            }
        }

        function addStoreLocationMarker(id, latLng, storeName, address) {

            var content = "<h5>" + storeName + "</h5> <hr/> <p> " + address + "</p>";

            //store marker, green icon, no drop
            var marker = new google.maps.Marker({
                position: latLng,
                title: storeName,
                map: Map,
                draggable: false,
                icon: 'http://s33.postimg.org/pij1bi34v/rent_Marker.png'
            });

            //on marker click, set the content, then move the store windo
            google.maps.event.addListener(marker, 'click', function () {
                StoreInfoWindow.setContent(content);
                StoreInfoWindow.open(Map, marker);

                setSelectedLocationData(id, storeName);
            });
        }

        function addUserLocationMarker(location, content) {

            if (UserMarker == null) {
                //new user location, red icon, drop
                UserMarker = new google.maps.Marker({
                    position: location,
                    title: content,
                    animation: google.maps.Animation.DROP,
                    map: Map,
                    draggable: false,
                });
            } else {
                UserMarker.setPosition(location);
            }

            google.maps.event.addListener(UserMarker, 'click', function () {
                UserInfoWindow.setContent(content);
                UserInfoWindow.open(Map, UserMarker);
            });
        }

        function getMiles(i) {
            return i * 0.000621371192;
        }

        function checkMarkerDistances() {

            var returnData = new Array();

            //user location lat/lng
            var userLatLng = new google.maps.LatLng(userLocation.geometry.location.lat(), userLocation.geometry.location.lng());

            //the user selected distance in the dropdown
            var selectedDistanceValue = ViewModel.DistanceValue();
            var selectedDistance;

            switch (selectedDistanceValue) {
                case "5 miles":
                    selectedDistance = 5;
                    break;
                case "10 miles":
                    selectedDistance = 10;
                    break;
                case "20 miles":
                    selectedDistance = 20;
                    break;
                case "50 miles":
                    selectedDistance = 50;
                    break;
                case "100 miles":
                    selectedDistance = 100;
                    break;
                default:
                    selectedDistance = 0;
            }

            //foeach marker on the map
            for (var i = 0; i < storeLocations.length; i++) {

                var storeLatLng = new google.maps.LatLng(storeLocations[i].location.lat(), storeLocations[i].location.lng());

                var distanceMeters = google.maps.geometry.spherical.computeDistanceBetween(userLatLng, storeLatLng);
                var distanceMiles = getMiles(distanceMeters);


                if (selectedDistanceValue === "Any distance") {
                    //any distance selected, all locations valid
                    storeLocations[i].withinSelectedBounds = true;
                    storeLocations[i].milesFromUser = 0;

                    returnData.push({ id: storeLocations[i].Id, distance: distanceMiles });
                } else {
                    //user has selected a distance limit, calculate distance of marker from user
                    if (distanceMiles <= selectedDistance) {
                        storeLocations[i].withinSelectedBounds = true;
                        storeLocations[i].milesFromUser = distanceMiles;

                        returnData.push({ id: storeLocations[i].Id, distance: distanceMiles });

                    } else {
                        storeLocations[i].withinSelectedBounds = false;
                        storeLocations[i].milesFromUser = -1;
                    }
                }
            }

            return returnData;
        }

    </script>
}


<style>
    .container.body-content {
        margin: 0;
        padding: 0;
        width: 100%;
    }

    .postcodeLookupText {
        padding-left: 30px;
    }

    #locationsOverlay {
        overflow: auto;
        position: absolute;
        height: 480px;
        width: 380px;
        left: 25px;
        top: 300px;
        z-index: 1;
        padding: 0;
        padding-bottom: 2px;
    }

    #googleMap {
        position: relative;
        background: transparent no-repeat;
        /*top: 200px;*/
        top: 0px;
        left: 0px;
        width: 100%;
        height: 600px;
        z-index: 0;
    }
</style>
