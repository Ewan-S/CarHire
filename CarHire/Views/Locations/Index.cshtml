@using System.Linq
@model IEnumerable<CarHireDataAccess.Models.Locations.StoreLocation>

<head>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=true&libraries=places,geometry"></script>
</head>

<h1 class="paddedArea PageHeading">Search Locations</h1>
<hr />

<body>
    <div class="row">
        <div class="col-lg-8">
            <h5 class="paddedArea">
                <label>Find a location near you @Html.TextBox("postcodeText", null, new { placeholder = "Place/Address", @id = "searchBox", @style = "width:400px;" })</label>

                <em>within <select id="distanceDropdown" data-bind="options: distanceValues, value: DistanceValue"></select></em>
            </h5>
        </div>
        <div class="col-lg-4 hidden" data-bind="visible: DisplaySelectedLocation, css: { hidden: false }" style="padding-right: 30px">
            <label>
                Selected: <span data-bind='text: SelectedLocationName'></span>
            </label>

            <button class="btn btn-primary btn-lg" style="float: right;" data-bind='click: continueWithSelection'>
                Car Selection
                <span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span>
            </button>
        </div>
    </div>
    <hr />

    <div id="googleMap"></div>

    <div id="locationsOverlay" class="well" data-bind="visible: DisplayLocationsOverlay">
        <div id="locationsData"></div>
    </div>
</body>


@section Scripts{
    <script>
        //global variables, here so they can be easily accessed
        //the instance of the postcode box
        var PostcodeSearchbox;
        //the instance of the google map
        var Map;
        //the user marker instance
        var UserMarker;
        //the infowindow for store locations, one 1 instance to prevent multiple popups
        var StoreInfoWindow;
        //the infowindow for user location, one 1, same as above
        var UserInfoWindow;
        //the instance of the knockout viewmodel
        var ViewModel;
        //stores the storeLocation data for later access
        var storeLocations = [];

        //user's location as a google map place, and as a googlemap LatLng
        var userLocation, userLatLng;

        //knockout viewmodel defination
        function LocationsViewModel(id, name) {
            var self = this;

            //distance dropdown values
            self.distanceValues = ko.observableArray(["5 miles", "10 miles", "20 miles", "50 miles", "100 miles", "Any distance"]),
            //the selected distance (bound to the dropdown)
            self.DistanceValue = ko.observable("Any distance"),

            //actual variables to store selected location data
            self.SelectedLocationId = ko.observable(id);
            self.SelectedLocationName = ko.observable(name);

            //called when the user clicks one of the select buttons, to select a store location
            this.selectLocation = function (id) {

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("SetSelectedLocation", "Locations")',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ locationId: id }),
                    cache: false,
                    traditional: true,

                    success: function (result) { } ,
                    error: function (result) { alert("error setting session") }
                });

                self.SelectedLocationId(id);

                var store = getStoreById(id);
                self.SelectedLocationName(store.storeName);
            };

            this.continueWithSelection = function () {
                //cant use js values is razor defination, so replace id value
                var url = '@Url.Action("Index", "Vehicles", new { locationId = "_id_" })';
                window.location.href = url.replace('_id_', ViewModel.SelectedLocationId());
            }

            this.showLocationDetails = function(id) {
                alert("show details for: " + id);
            }

            //do we display the users selection? (has the user made a selection?)
            this.DisplaySelectedLocation = ko.computed(function() {
                if (this.SelectedLocationId()) {
                    return true;
                } else {
                    return false;
                }
            }, this);


            //should we display the locations overlay - ie, the user has selected a location and distance
            self.DisplayLocationsOverlay = ko.observable(false);
        }

        //functions to set knockout viewmodel values
        function KO_setDisplayLocationsOverlayFlag(displayLocationsOverlay) {
            if (displayLocationsOverlay)
                ViewModel.DisplayLocationsOverlay(displayLocationsOverlay);
        }

        //on page load function
        $(function() {

            //setup the google maps popups, but dont show or set content
            StoreInfoWindow = new google.maps.InfoWindow({
                content: "",
                maxWidth: 200
            });

            UserInfoWindow = new google.maps.InfoWindow({
                content: "",
                maxWidth: 50
            });

            //setup the postcode lookup textbox
            SetupPostcodeBox();

            //create the map, and place markers
            SetupMap();

            ViewModel = new LocationsViewModel(null, null);

            //when the user changes the DistanceValue (which is hooked to dropdown), call onDropdownChange
            ViewModel.DistanceValue.subscribe(function (newValue) {
                onDropdownChange();
            });

            ko.applyBindings(ViewModel);
        });

        //functions to setup page controls
        function SetupPostcodeBox() {
            //setup the postcode searchbox using google's autocomplete geocode textbox
            PostcodeSearchbox = new google.maps.places.Autocomplete(document.getElementById('searchBox'), { types: ['geocode'] });

            //on postcodebox change call onPostcodeBoxChanged
            google.maps.event.addListener(PostcodeSearchbox, 'place_changed', onPostcodeBoxChanged);
        }

        function SetupMap() {

            var country = "United kingdom";
            var geocoder = new google.maps.Geocoder();

            //geocodes the middle (ish) of the UK and creates the map
            geocoder.geocode({ 'address': country }, function(results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    var mapProperties = {
                        zoom: 6,
                        mapTypeId: google.maps.MapTypeId.ROADMAP,
                        streetViewControl: false,
                        center: { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng() }
                    };

                    Map = new google.maps.Map(document.getElementById("googleMap"), mapProperties);
                } else {
                    alert("boom goes the dynamite");
                }

                //add our store location markers
                PlaceMarkersFromModel();

            });
        }

        //onChange events for controls
        function onDropdownChange() {
            //if the user has selected their location in the textbox
            if (userLocation)
                requestMarkerDistances();
            else
                alert("no selection?");
        }

        function onPostcodeBoxChanged() {

            //get the location the user has selected from the dropdown
            userLocation = this.getPlace();

            //users location as gmap lat/lng
            userLatLng = new google.maps.LatLng(userLocation.geometry.location.lat(), userLocation.geometry.location.lng());

            addUserLocationMarker(userLatLng, '<em>Your location</em>');

            requestMarkerDistances();
        }

        function requestMarkerDistances() {

            //returns an array of storelocation Ids, and the distance from the user
            var markerDistances = checkMarkerDistances();

            //sanity check
            if (!markerDistances)
                return;

            $.ajax({
                type: "POST",
                url: '@Url.Action("LocationsListPartial", "Locations")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ storeLocations: markerDistances }),
                cache: false,
                traditional: true,

                success: function(result) { displayOverlay(result); },
                error: function(result) { displayOverlay(result); }
            });

            var nearestStoreId = markerDistances[0].id;

            //returns an array of 1, where store id matches
            var store = getStoreById(nearestStoreId);

            new google.maps.event.trigger(store.marker, 'click');

            var bounds = new google.maps.LatLngBounds();
            bounds.extend(store.marker.getPosition());
            bounds.extend(UserMarker.getPosition());

            if (Map.getCenter() !== bounds.getCenter()) {
                Map.setCenter(bounds.getCenter());
                Map.fitBounds(bounds);
            }

            if (Map.getZoom() !== 10)
                Map.setZoom(10);
        }

        function displayOverlay(html) {

            ////display the partial view
            var locationDataElement = document.getElementById("locationsData");
            locationDataElement.innerHTML = html;

            //clear the knockout bindings
            ko.cleanNode(locationDataElement);

            //reapply the vm to the partial view
            ko.applyBindings(ViewModel, locationDataElement);

            KO_setDisplayLocationsOverlayFlag(true);
        }

        function PlaceMarkersFromModel() {
            @if (Model.Any())
            {
                foreach (var item in Model)
                {
                    @:var latLng = new google.maps.LatLng("@item.latitude", "@item.longtitude");
                    @:var marker = addStoreLocationMarker("@item.LocationId", latLng, "@item.StoreName", "@item.Address.EscapedFormattedAddress");

                    <text>
                    var storeData = {
                        Id: "@item.LocationId",
                        marker: marker,
                        location: latLng,
                        storeName: "@item.EscapedStoreName",
                        address: "@item.Address.EscapedFormattedAddress",
                        withinSelectedBounds: false,
                        milesFromUser: -1
                    };
                    </text>

                    @: storeLocations.push(storeData);
                }
            }
            else
            {
                @*@:$("#locationsOverlay").html("<p>No locations found! <em>Update-Datebase ?</em></p>");*@
                @:$("#locationsOverlay").innerHTML = "<p>No locations found! <em>Update-Datebase ?</em></p>";

                @:KO_setDisplayLocationsOverlayFlag(true);
            }
        }

        function addStoreLocationMarker(id, latLng, storeName, address) {

            //store marker, green icon, no drop
            var marker = new google.maps.Marker({
                position: latLng,
                title: storeName,
                map: Map,
                draggable: false,
                icon: 'http://s33.postimg.org/pij1bi34v/rent_Marker.png'
            });

            //on store marker click, popup infowindow with location info
            google.maps.event.addListener(marker, 'click', function () {

                //create the pop view (not great, could load partial?)
                //storename header, underline, address paragraph, underline, select button with knockout binding to call the select method of the VM
                var content = "<h5>" + storeName + "</h5> <hr/> <p> " + address + "</p> <hr/> <button id=\"selectInfoButton\" style=\"text-align: center\" data-bind=\"click:selectLocation.bind($data, '" + id + "')\">Select</button>";

                //set the content of the infowindow, and show it
                StoreInfoWindow.setContent(content);
                StoreInfoWindow.open(Map, marker);

                //we still have to apply the knockout binding to the new popup content
                var selectInfoButton = document.getElementById("selectInfoButton");

                //clear the existing knockout bindings
                ko.cleanNode(selectInfoButton);

                //reapply the vm binding to the infowindow
                ko.applyBindings(ViewModel, selectInfoButton);
            });

            return marker;
        }

        function addUserLocationMarker(location, content) {

            if (!UserMarker) {
                //new user location, red icon, drop
                UserMarker = new google.maps.Marker({
                    position: location,
                    title: content,
                    animation: google.maps.Animation.DROP,
                    map: Map,
                    draggable: false,
                });
            } else {
                UserMarker.setPosition(location);
            }

            google.maps.event.addListener(UserMarker, 'click', function() {
                UserInfoWindow.setContent(content);
                UserInfoWindow.open(Map, UserMarker);
            });
        }

        function getMiles(i) {
            return i * 0.000621371192;
        }

        function checkMarkerDistances() {

            if (!userLocation)
                return null;

            var returnData = new Array();

            //user location lat/lng
            var userLatLng = new google.maps.LatLng(userLocation.geometry.location.lat(), userLocation.geometry.location.lng());

            //the user selected distance from the dropdown
            var selectedDistanceValue = ViewModel.DistanceValue();
            var selectedDistance;

            switch (selectedDistanceValue) {
            case "5 miles":
                selectedDistance = 5;
                break;
            case "10 miles":
                selectedDistance = 10;
                break;
            case "20 miles":
                selectedDistance = 20;
                break;
            case "50 miles":
                selectedDistance = 50;
                break;
            case "100 miles":
                selectedDistance = 100;
                break;
            default:
                selectedDistance = 0;
            }

            //foreach marker on the map (stores that we have saved in storeLocations)
            for (var i = 0; i < storeLocations.length; i++) {

                //get the store's location latlng
                var storeLatLng = new google.maps.LatLng(storeLocations[i].location.lat(), storeLocations[i].location.lng());

                //compute distance from user to store
                var distanceMeters = google.maps.geometry.spherical.computeDistanceBetween(userLatLng, storeLatLng);

                //convert meters to miles
                var distanceMiles = getMiles(distanceMeters);

                //if any distance selected, all locations valid
                if (selectedDistanceValue === "Any distance") {
                    storeLocations[i].withinSelectedBounds = true;
                    storeLocations[i].milesFromUser = -1;

                    //push the store data into the return object
                    returnData.push({ id: storeLocations[i].Id, distance: distanceMiles });
                } else {
                    storeLocations[i].milesFromUser = distanceMiles;

                    //user has selected a distance limit, is distance within bounds?
                    if (distanceMiles <= selectedDistance) {
                        storeLocations[i].withinSelectedBounds = true;
                        returnData.push({ id: storeLocations[i].Id, distance: distanceMiles });
                    } else {
                        storeLocations[i].withinSelectedBounds = false;
                    }
                }
            }

            //sort by distance
            returnData.sort(function(a, b) {
                return a.distance - b.distance;
            });

            return returnData;
        }

        function getStoreById(id) {
            if (storeLocations && id)
                return storeLocations.filter(function(store) { return store.Id == id; })[0];
            else
                return null;

        }

    </script>
}


<style>
    /*For hiding divs that flash due to knockout binding taking too long*/
    .hidden {
        display: none;
    }

    .container.body-content {
        margin: 0;
        padding: 0;
        width: 100%;
    }

    .paddedArea {
        padding-left: 30px;
    }

    #locationsOverlay {
        overflow: auto;
        position: absolute;
        height: auto;
        max-height: 480px;
        width: 320px;
        left: 25px;
        top: 400px;
        z-index: 1;
        padding: 0;
        padding-bottom: 2px;
    }

    #googleMap {
        position: relative;
        background: transparent no-repeat;
        /*top: 200px;*/
        top: 0px;
        left: 0px;
        width: 100%;
        height: 600px;
        z-index: 0;
    }
</style>
